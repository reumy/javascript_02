### 0728

## 변수명 선언규칙
- 대소문자를 구별
- 한글로 선언가능
- 맨앞에 올 수 있는 건 \_ , $ 뿐
- 맨앞에는 숫자가 올 수 없음
- 예약어, 키워드 사용 불가능 (자바스크립트 내부에 이미 지정되어있는 것 if, for ...)

## 변수의 타입
- 기본 자료형 : 숫자형, 문자형, boolean, null, undefined
- 기본데이터, 메모리셋이 지정이 되버림
- 참조형 :  객체형 (function, array, {}, object)
- 기본 메모리셋이 결정이 안되어 실질적인 곳에 마음대로 할당하고 참조만 함
- `= : 할당 연산자`
- null도 object인데 왜 기본자료형이 되는가? (참고)
```
var a = null;
var b;
console.log(a);  // null(회색)
console.log(typeof(a));  // object(검정)
console.log(b);  // undefined(회색)
console.log(typeof(b));  // undefined(검정)
```
> undefined는 값으로도 존재하고 타입으로도 존재함<br/> null의 값은 null이고 타입은 object<br/>null은 객체를 할당할 의도를 가졌지만 값을 주지않고 초기값을 준 상태

- `회색 : 값 / 검정 : 타입`

## 리터럴
- `변수 = 값` 형태
- 값으로 정해서 재할당이 되지않는 것
- 오른쪽이 값으로 쓰이는 것
- 단, 변수는 가변 메모리공간으로 값이 변할 수 있음
```
var a = 10;
```
> 숫자 리터럴
```
var b = "20";
```
> 문자 리터럴
```
var e = {
  v1 : 10,
  v2 : 20
}
```
> 객체 리터럴

## 호이스트
```
var a = 10;

function f1(){
  console.log(a);
  var a = 20;
}

f1();  // undefined
```
1. compile : 전역변수가 undefined로 메모리에 생성
2. runtime (실행) : 명령어가 한줄 한줄 수행되는 과정

> 자바스크립트는 라인단위 실행으로 한줄씩 읽기때문에 f1()함수가 실행되면 console.log(a)를 찍고(undefined) 변수 a (20)를 찾음

```
var a = 10;

function f1(){
  //a = undefined  // 컴파일
  console.log(a);
  var a = 20;  // 런타임
  // a = undefined = 20
}

f1();
```
> 즉, 콘솔이 먼저 실행되어 그 당시에는 변수를 찾을 수 없어 undefined를 찍고, 그 다음 변수 a (20)를 인식해 찾았기때문에 위에서 변수 a (10)를 찾을 필요없이 함수가 종료됨. 만약 안에 var a = 20이 없었다면 var a = 10을 찾았을 것

## 변수
- var : 함수 블럭에서만 영향
- let : {} 블럭 생명력
- const : 변하지않는 상수의 의미로, 선언과 동시에 할당을 해주어야 함 (재할당, 재선언 불가능)

## ++ 
- `++a` == `a = a + 1` == `a += 1`
- ++a : 할당 연산자 보다 우선순위가 높음
- a++ : 할당 연산자 보다 우선순위가 낮음
```
if c == ++b
```
> ++b 먼저 실행 후 == 실행